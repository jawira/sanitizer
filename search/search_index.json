{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home List of sanitizers Sanitizer Works with Description Abs int , float Absolute value. Ascii string Remove all characters except ascii characters. AtLeast int , float Value is at least equal to provided number. AtMost int , float Value is at most equal to provided number. Cut string Limit string length. Digits string Remove all characters except digits. EmptyStringToNull string Set null if value is empty string . FloatChars string Remove all characters except 0-9 , + , - , . and optionally , , e , and E . IntegerChars string Remove all characters except 0-9 , + , - . Lowercase string Make a string lowercase. Pad string Pad a string to a certain length with another string . Replace string Replace all occurrences of the search string with the replacement string . StripTags string Strip HTML and PHP tags from a string . Title string Converts the first letter of each word to uppercase and leaves the others as lowercase. ToInt null , bool , float , string , array Cast value to integer . ToString null , bool , int , float , array Cast value to string . Trim string Strip whitespace (or other characters) from the beginning and end of a string . Uppercase string Make a string uppercase.","title":"Home"},{"location":"index.html#home","text":"","title":"Home"},{"location":"index.html#list-of-sanitizers","text":"Sanitizer Works with Description Abs int , float Absolute value. Ascii string Remove all characters except ascii characters. AtLeast int , float Value is at least equal to provided number. AtMost int , float Value is at most equal to provided number. Cut string Limit string length. Digits string Remove all characters except digits. EmptyStringToNull string Set null if value is empty string . FloatChars string Remove all characters except 0-9 , + , - , . and optionally , , e , and E . IntegerChars string Remove all characters except 0-9 , + , - . Lowercase string Make a string lowercase. Pad string Pad a string to a certain length with another string . Replace string Replace all occurrences of the search string with the replacement string . StripTags string Strip HTML and PHP tags from a string . Title string Converts the first letter of each word to uppercase and leaves the others as lowercase. ToInt null , bool , float , string , array Cast value to integer . ToString null , bool , int , float , array Cast value to string . Trim string Strip whitespace (or other characters) from the beginning and end of a string . Uppercase string Make a string uppercase.","title":"List of sanitizers"},{"location":"Cast/ToInt.html","text":"ToInt ToInt - Casts value to integer . Empty arrays return 0 , non-empty arrays return 1 . ToInt only works with null , bool , float , string , array , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\ToInt] public int|string $age; } Parameters int base (optional): Sets the base, only used when value is string . When the base is set to 0 , the base is determined by string prefix. If the string starts with: 0b or 0B the base is 2 . 0x or 0X the base is 16 . 0 the base is 8 . Default value is 10 . Examples Cast value to integer. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt] public $quantity; } null \u2192 0 true \u2192 1 false \u2192 0 450 \u2192 450 8.0 \u2192 8 8.1 \u2192 8 \"15\" \u2192 15 \"-15\" \u2192 -15 \"70.99\" \u2192 70 \"-70.99\" \u2192 -70 \"5e3\" \u2192 5000 [] \u2192 0 ['foo', 'bar'] \u2192 1 Cast binary string to integer. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt(base: 2)] public $quantity; } \"10011\" \u2192 19 \"0b10011\" \u2192 19 Detect string base. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt(base: 0)] public $quantity; } \"0b10011\" \u2192 19 \"0x1A\" \u2192 26 \"077\" \u2192 63 See also ToString - Casts value to string .","title":"ToInt"},{"location":"Cast/ToInt.html#toint","text":"ToInt - Casts value to integer . Empty arrays return 0 , non-empty arrays return 1 . ToInt only works with null , bool , float , string , array , any other type is ignored.","title":"ToInt"},{"location":"Cast/ToInt.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\ToInt] public int|string $age; }","title":"Basic usage"},{"location":"Cast/ToInt.html#parameters","text":"int base (optional): Sets the base, only used when value is string . When the base is set to 0 , the base is determined by string prefix. If the string starts with: 0b or 0B the base is 2 . 0x or 0X the base is 16 . 0 the base is 8 . Default value is 10 .","title":"Parameters"},{"location":"Cast/ToInt.html#examples","text":"Cast value to integer. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt] public $quantity; } null \u2192 0 true \u2192 1 false \u2192 0 450 \u2192 450 8.0 \u2192 8 8.1 \u2192 8 \"15\" \u2192 15 \"-15\" \u2192 -15 \"70.99\" \u2192 70 \"-70.99\" \u2192 -70 \"5e3\" \u2192 5000 [] \u2192 0 ['foo', 'bar'] \u2192 1 Cast binary string to integer. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt(base: 2)] public $quantity; } \"10011\" \u2192 19 \"0b10011\" \u2192 19 Detect string base. use Jawira\\Sanitizer\\Filters as Sanitizer; class Product { #[Sanitizer\\ToInt(base: 0)] public $quantity; } \"0b10011\" \u2192 19 \"0x1A\" \u2192 26 \"077\" \u2192 63","title":"Examples"},{"location":"Cast/ToInt.html#see-also","text":"ToString - Casts value to string .","title":"See also"},{"location":"Cast/ToString.html","text":"ToString ToString - Casts value to string . ToString only works with null , bool , int , float , array , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\ToString] public string $name; } Parameters No parameters. Examples Cast value to string. use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\ToString] public $description; } null \u2192 \"\" true \u2192 \"1\" false \u2192 \"\" 456 \u2192 \"456\" 3.14 \u2192 \"3.14\" See also ToInt - Casts value to integer .","title":"ToString"},{"location":"Cast/ToString.html#tostring","text":"ToString - Casts value to string . ToString only works with null , bool , int , float , array , any other type is ignored.","title":"ToString"},{"location":"Cast/ToString.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\ToString] public string $name; }","title":"Basic usage"},{"location":"Cast/ToString.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Cast/ToString.html#examples","text":"Cast value to string. use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\ToString] public $description; } null \u2192 \"\" true \u2192 \"1\" false \u2192 \"\" 456 \u2192 \"456\" 3.14 \u2192 \"3.14\"","title":"Examples"},{"location":"Cast/ToString.html#see-also","text":"ToInt - Casts value to integer .","title":"See also"},{"location":"Letter-case/Lowercase.html","text":"Lowercase Lowercase - Make a string lowercase. Lowercase only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Lowercase] public string $username; } Parameters No parameters. Examples Convert string to lowercase letters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Lowercase] public string $keywords; } \"HELLO\" \u2192 \"hello\" \"Foo Bar\" \u2192 \"foo bar\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \"\u03b3\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" See also Title - Converts the first letter of each word to uppercase and leaves the others as lowercase. Uppercase - Make a string uppercase.","title":"Lowercase"},{"location":"Letter-case/Lowercase.html#lowercase","text":"Lowercase - Make a string lowercase. Lowercase only works with string , any other type is ignored.","title":"Lowercase"},{"location":"Letter-case/Lowercase.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Lowercase] public string $username; }","title":"Basic usage"},{"location":"Letter-case/Lowercase.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Letter-case/Lowercase.html#examples","text":"Convert string to lowercase letters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Lowercase] public string $keywords; } \"HELLO\" \u2192 \"hello\" \"Foo Bar\" \u2192 \"foo bar\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \"\u03b3\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\"","title":"Examples"},{"location":"Letter-case/Lowercase.html#see-also","text":"Title - Converts the first letter of each word to uppercase and leaves the others as lowercase. Uppercase - Make a string uppercase.","title":"See also"},{"location":"Letter-case/Title.html","text":"Title Title - Converts the first letter of each word to uppercase and leaves the others as lowercase. Title only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Title] public string $title; } Parameters No parameters. Examples Set value in title case. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Title] public string $title; } \"d\u00e9j\u00e0 vu\" \u2192 \"D\u00e9j\u00e0 Vu\" \"pr\u00eat-\u00e0-porter\" \u2192 \"Pr\u00eat-\u00c0-Porter\" \"foo bar baz\" \u2192 \"Foo Bar Baz\" See also Lowercase - Make a string lowercase. Uppercase - Make a string uppercase.","title":"Title"},{"location":"Letter-case/Title.html#title","text":"Title - Converts the first letter of each word to uppercase and leaves the others as lowercase. Title only works with string , any other type is ignored.","title":"Title"},{"location":"Letter-case/Title.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Title] public string $title; }","title":"Basic usage"},{"location":"Letter-case/Title.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Letter-case/Title.html#examples","text":"Set value in title case. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Title] public string $title; } \"d\u00e9j\u00e0 vu\" \u2192 \"D\u00e9j\u00e0 Vu\" \"pr\u00eat-\u00e0-porter\" \u2192 \"Pr\u00eat-\u00c0-Porter\" \"foo bar baz\" \u2192 \"Foo Bar Baz\"","title":"Examples"},{"location":"Letter-case/Title.html#see-also","text":"Lowercase - Make a string lowercase. Uppercase - Make a string uppercase.","title":"See also"},{"location":"Letter-case/Uppercase.html","text":"Uppercase Uppercase - Make a string uppercase. Uppercase only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Uppercase] public string $initials; } Parameters No parameters. Examples Convert string to lowercase letters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Uppercase] public string $keywords; } \"foo\" \u2192 \"FOO\" \"Bar Baz\" \u2192 \"BAR BAZ\" \"pr\u00eat-\u00e0-porter\" \u2192 \"PR\u00caT-\u00c0-PORTER\" See also Lowercase - Make a string lowercase. Title - Converts the first letter of each word to uppercase and leaves the others as lowercase.","title":"Uppercase"},{"location":"Letter-case/Uppercase.html#uppercase","text":"Uppercase - Make a string uppercase. Uppercase only works with string , any other type is ignored.","title":"Uppercase"},{"location":"Letter-case/Uppercase.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Uppercase] public string $initials; }","title":"Basic usage"},{"location":"Letter-case/Uppercase.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Letter-case/Uppercase.html#examples","text":"Convert string to lowercase letters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Uppercase] public string $keywords; } \"foo\" \u2192 \"FOO\" \"Bar Baz\" \u2192 \"BAR BAZ\" \"pr\u00eat-\u00e0-porter\" \u2192 \"PR\u00caT-\u00c0-PORTER\"","title":"Examples"},{"location":"Letter-case/Uppercase.html#see-also","text":"Lowercase - Make a string lowercase. Title - Converts the first letter of each word to uppercase and leaves the others as lowercase.","title":"See also"},{"location":"Numbers/Abs.html","text":"Abs Abs - Absolute value. Abs only works with int and float , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Travel { #[Sanitizer\\Abs] public int $km; } Parameters No parameters. Examples Absolute value: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Abs] public int|float $age; } 10 \u2192 10 -5 \u2192 5 3.14 \u2192 3.14 -1.5 \u2192 1.5 See also -","title":"Abs"},{"location":"Numbers/Abs.html#abs","text":"Abs - Absolute value. Abs only works with int and float , any other type is ignored.","title":"Abs"},{"location":"Numbers/Abs.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Travel { #[Sanitizer\\Abs] public int $km; }","title":"Basic usage"},{"location":"Numbers/Abs.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Numbers/Abs.html#examples","text":"Absolute value: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Abs] public int|float $age; } 10 \u2192 10 -5 \u2192 5 3.14 \u2192 3.14 -1.5 \u2192 1.5","title":"Examples"},{"location":"Numbers/Abs.html#see-also","text":"-","title":"See also"},{"location":"Numbers/AtLeast.html","text":"AtLeast AtLeast - Value is at least equal to provided number. AtLeast only works with int and float , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Motorcycle { #[Sanitizer\\AtLeast(number: 2)] public int $wheels; } Parameters int|float number (optional): The property value will be compared against this number, if value is less than provided number then this number will be used instead. Default value is 0 . Examples Value must be positive or zero. use Jawira\\Sanitizer\\Filters as Sanitizer; class Post { #[Sanitizer\\AtLeast] public int $likes; } 0 \u2192 0 10 \u2192 10 -5 \u2192 5 Value must be greater or equal than -273.15 . use Jawira\\Sanitizer\\Filters as Sanitizer; class Chemical { #[Sanitizer\\AtLeast(number: -273.15)] public int|float $temperature; } 53 \u2192 53 -100.50 \u2192 -100.50 -3000 \u2192 -273.15 See also AtMost - Value is at most equal to provided number.","title":"AtLeast"},{"location":"Numbers/AtLeast.html#atleast","text":"AtLeast - Value is at least equal to provided number. AtLeast only works with int and float , any other type is ignored.","title":"AtLeast"},{"location":"Numbers/AtLeast.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Motorcycle { #[Sanitizer\\AtLeast(number: 2)] public int $wheels; }","title":"Basic usage"},{"location":"Numbers/AtLeast.html#parameters","text":"int|float number (optional): The property value will be compared against this number, if value is less than provided number then this number will be used instead. Default value is 0 .","title":"Parameters"},{"location":"Numbers/AtLeast.html#examples","text":"Value must be positive or zero. use Jawira\\Sanitizer\\Filters as Sanitizer; class Post { #[Sanitizer\\AtLeast] public int $likes; } 0 \u2192 0 10 \u2192 10 -5 \u2192 5 Value must be greater or equal than -273.15 . use Jawira\\Sanitizer\\Filters as Sanitizer; class Chemical { #[Sanitizer\\AtLeast(number: -273.15)] public int|float $temperature; } 53 \u2192 53 -100.50 \u2192 -100.50 -3000 \u2192 -273.15","title":"Examples"},{"location":"Numbers/AtLeast.html#see-also","text":"AtMost - Value is at most equal to provided number.","title":"See also"},{"location":"Numbers/AtMost.html","text":"AtMost AtMost - Value is at most equal to provided number. AtMost only works with int and float , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Exam { #[Sanitizer\\AtMost(number: 100)] public string $grade; } Parameters int|float number (optional): The property value will be compared against this number, if value is greater than provided number then this number will be used instead. Default value is 0 . Examples Value must be negative or zero. use Jawira\\Sanitizer\\Filters as Sanitizer; class Submarine { #[Sanitizer\\AtMost] public int|float $depth; } 50 \u2192 0 36 \u2192 0 10 \u2192 0 -5 \u2192 -5 -500.45 \u2192 -500.45 Value cannot be greater than 20. use Jawira\\Sanitizer\\Filters as Sanitizer; class Building { #[Sanitizer\\AtMost(number: 20)] public int $levels; } 50 \u2192 20 36 \u2192 20 10 \u2192 10 0 \u2192 0 -2 \u2192 -2 See also AtLeast - Value is at least equal to provided number.","title":"AtMost"},{"location":"Numbers/AtMost.html#atmost","text":"AtMost - Value is at most equal to provided number. AtMost only works with int and float , any other type is ignored.","title":"AtMost"},{"location":"Numbers/AtMost.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Exam { #[Sanitizer\\AtMost(number: 100)] public string $grade; }","title":"Basic usage"},{"location":"Numbers/AtMost.html#parameters","text":"int|float number (optional): The property value will be compared against this number, if value is greater than provided number then this number will be used instead. Default value is 0 .","title":"Parameters"},{"location":"Numbers/AtMost.html#examples","text":"Value must be negative or zero. use Jawira\\Sanitizer\\Filters as Sanitizer; class Submarine { #[Sanitizer\\AtMost] public int|float $depth; } 50 \u2192 0 36 \u2192 0 10 \u2192 0 -5 \u2192 -5 -500.45 \u2192 -500.45 Value cannot be greater than 20. use Jawira\\Sanitizer\\Filters as Sanitizer; class Building { #[Sanitizer\\AtMost(number: 20)] public int $levels; } 50 \u2192 20 36 \u2192 20 10 \u2192 10 0 \u2192 0 -2 \u2192 -2","title":"Examples"},{"location":"Numbers/AtMost.html#see-also","text":"AtLeast - Value is at least equal to provided number.","title":"See also"},{"location":"Numeric-strings/Digits.html","text":"Digits Digits - Remove all characters except digits. The following characters are considered a digit 0123456789 . Digits only works with strings , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Phone { #[Sanitizer\\Digits] public string $pinCode; } Parameters No parameters. Examples Remove all characters but digits. use Jawira\\Sanitizer\\Filters as Sanitizer; class Phone { #[Sanitizer\\Digits] public string $pinCode; } \"0011\" \u2192 \"0011\" \"9 7 0 1\" \u2192 \"9701\" \" Code 4587\" \u2192 \"4587\" See also IntegerChars - Remove all characters except 0-9 , + , - , and . .","title":"Digits"},{"location":"Numeric-strings/Digits.html#digits","text":"Digits - Remove all characters except digits. The following characters are considered a digit 0123456789 . Digits only works with strings , any other type is ignored.","title":"Digits"},{"location":"Numeric-strings/Digits.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Phone { #[Sanitizer\\Digits] public string $pinCode; }","title":"Basic usage"},{"location":"Numeric-strings/Digits.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Numeric-strings/Digits.html#examples","text":"Remove all characters but digits. use Jawira\\Sanitizer\\Filters as Sanitizer; class Phone { #[Sanitizer\\Digits] public string $pinCode; } \"0011\" \u2192 \"0011\" \"9 7 0 1\" \u2192 \"9701\" \" Code 4587\" \u2192 \"4587\"","title":"Examples"},{"location":"Numeric-strings/Digits.html#see-also","text":"IntegerChars - Remove all characters except 0-9 , + , - , and . .","title":"See also"},{"location":"Numeric-strings/FloatChars.html","text":"FloatChars FloatChars - Remove all characters except 0-9 , + , - , . and optionally , , e , and E . FloatChars does not verify if a string is a well-formed float string, it only verifies that all characters belong to a certain character set. Therefore, even if it's counterintuitive, FloatChars will leave the following strings unmodified: \"13\" \"-50.3\" \"+-456...789\" FloatChars only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\FloatChars] public string $height; } Parameters bool allowThousand (optional): Allow a thousand separator character , . Default value is false . bool allowScientific (optional): Allow scientific notation characters eE . Default value is false . Examples Only allow 0-9 , + , - and . characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars] public string $odometer; } \"152\" \u2192 \"152\" \"-21\" \u2192 \"-21\" \" +13.5 \" \u2192 \"+13.5\" \"437.50X\" \u2192 \"437.50\" \"Foo Bar\" \u2192 \"\" \"-654-.-546-\" \u2192 \"-654-.-546-\" Only allow 0-9 , + , - , . , and thousand separator , . use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars(allowThousand: true)] public string $odometer; } \"45,452.3\" \u2192 \"45,452.3\" \"-3,500.50\" \u2192 \"-3,500.50\" \"Foo Bar\" \u2192 \"\" \"-654,.,546-\" \u2192 \"-654,.,546-\" Only allow 0-9 , + , - , . , and scientific notation characters e , E . use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars(allowScientific: true)] public string $odometer; } \"15e6\" \u2192 \"15e6\" \"173E-5\" \u2192 \"173E-5\" \"Foo 33 Bar\" \u2192 \"33\" \"-+E123...\" \u2192 \"-+E123...\" See also IntegerChars - Remove all characters except 0-9 , + , - , and . .","title":"FloatChars"},{"location":"Numeric-strings/FloatChars.html#floatchars","text":"FloatChars - Remove all characters except 0-9 , + , - , . and optionally , , e , and E . FloatChars does not verify if a string is a well-formed float string, it only verifies that all characters belong to a certain character set. Therefore, even if it's counterintuitive, FloatChars will leave the following strings unmodified: \"13\" \"-50.3\" \"+-456...789\" FloatChars only works with string , any other type is ignored.","title":"FloatChars"},{"location":"Numeric-strings/FloatChars.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\FloatChars] public string $height; }","title":"Basic usage"},{"location":"Numeric-strings/FloatChars.html#parameters","text":"bool allowThousand (optional): Allow a thousand separator character , . Default value is false . bool allowScientific (optional): Allow scientific notation characters eE . Default value is false .","title":"Parameters"},{"location":"Numeric-strings/FloatChars.html#examples","text":"Only allow 0-9 , + , - and . characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars] public string $odometer; } \"152\" \u2192 \"152\" \"-21\" \u2192 \"-21\" \" +13.5 \" \u2192 \"+13.5\" \"437.50X\" \u2192 \"437.50\" \"Foo Bar\" \u2192 \"\" \"-654-.-546-\" \u2192 \"-654-.-546-\" Only allow 0-9 , + , - , . , and thousand separator , . use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars(allowThousand: true)] public string $odometer; } \"45,452.3\" \u2192 \"45,452.3\" \"-3,500.50\" \u2192 \"-3,500.50\" \"Foo Bar\" \u2192 \"\" \"-654,.,546-\" \u2192 \"-654,.,546-\" Only allow 0-9 , + , - , . , and scientific notation characters e , E . use Jawira\\Sanitizer\\Filters as Sanitizer; class Car { #[Sanitizer\\FloatChars(allowScientific: true)] public string $odometer; } \"15e6\" \u2192 \"15e6\" \"173E-5\" \u2192 \"173E-5\" \"Foo 33 Bar\" \u2192 \"33\" \"-+E123...\" \u2192 \"-+E123...\"","title":"Examples"},{"location":"Numeric-strings/FloatChars.html#see-also","text":"IntegerChars - Remove all characters except 0-9 , + , - , and . .","title":"See also"},{"location":"Numeric-strings/IntegerChars.html","text":"IntegerChars IntegerChars - Remove all characters except 0-9 , + , - . IntegerChars does not verify if a string is a well-formed integer string, it only verifies that all characters belong to a certain character set. Therefore, even if it's counterintuitive, IntegerChars will leave the following strings unmodified: \"13\" \"-50\" \"+-8+-9\" IntegerChars only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\IntegerChars] public string $age; } Parameters No parameters. Examples Only allow 0-9 , + , - characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\IntegerChars] public string $age; } \"13 year\" \u2192 \"13\" \"+51 yo\" \u2192 \"+51\" \"--7--\" \u2192 \"--7--\" See also FloatChars - Remove all characters except 0-9 , + , - , . and optionally , , e , and E . Digits - Remove all characters except digits.","title":"IntegerChars"},{"location":"Numeric-strings/IntegerChars.html#integerchars","text":"IntegerChars - Remove all characters except 0-9 , + , - . IntegerChars does not verify if a string is a well-formed integer string, it only verifies that all characters belong to a certain character set. Therefore, even if it's counterintuitive, IntegerChars will leave the following strings unmodified: \"13\" \"-50\" \"+-8+-9\" IntegerChars only works with string , any other type is ignored.","title":"IntegerChars"},{"location":"Numeric-strings/IntegerChars.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\IntegerChars] public string $age; }","title":"Basic usage"},{"location":"Numeric-strings/IntegerChars.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Numeric-strings/IntegerChars.html#examples","text":"Only allow 0-9 , + , - characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\IntegerChars] public string $age; } \"13 year\" \u2192 \"13\" \"+51 yo\" \u2192 \"+51\" \"--7--\" \u2192 \"--7--\"","title":"Examples"},{"location":"Numeric-strings/IntegerChars.html#see-also","text":"FloatChars - Remove all characters except 0-9 , + , - , . and optionally , , e , and E . Digits - Remove all characters except digits.","title":"See also"},{"location":"Strings/Ascii.html","text":"Ascii Ascii - Remove all characters except ascii characters. In practice this means that all characters with a numerical value greater than 127 are removed. Ascii sanitizer only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Ascii] public string $username; } Parameters bool onlyPrintable (optional): Default value is false , all ascii characters are preserved. When true all characters with numerical value less than 32 are also removed, this is the first column of the following table. Examples Remove all non-ascii characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Message { #[Sanitizer\\Ascii] public string $content; } \"\u00danico\" \u2192 \"nico\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \" \" \"Foo\\nBar\" \u2192 \"Foo\\nBar\" \"\\tHello\" \u2192 \"\\tHello\" Remove all non-ascii characters and removing non-printable characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Message { #[Sanitizer\\Ascii(onlyPrintable: true)] public string $content; } \"\u00danico\" \u2192 \"nico\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \" \" \"Foo\\nBar\" \u2192 \"FooBar\" \"\\tHello\" \u2192 \"Hello\" See also -","title":"Ascii"},{"location":"Strings/Ascii.html#ascii","text":"Ascii - Remove all characters except ascii characters. In practice this means that all characters with a numerical value greater than 127 are removed. Ascii sanitizer only works with string , any other type is ignored.","title":"Ascii"},{"location":"Strings/Ascii.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Ascii] public string $username; }","title":"Basic usage"},{"location":"Strings/Ascii.html#parameters","text":"bool onlyPrintable (optional): Default value is false , all ascii characters are preserved. When true all characters with numerical value less than 32 are also removed, this is the first column of the following table.","title":"Parameters"},{"location":"Strings/Ascii.html#examples","text":"Remove all non-ascii characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Message { #[Sanitizer\\Ascii] public string $content; } \"\u00danico\" \u2192 \"nico\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \" \" \"Foo\\nBar\" \u2192 \"Foo\\nBar\" \"\\tHello\" \u2192 \"\\tHello\" Remove all non-ascii characters and removing non-printable characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Message { #[Sanitizer\\Ascii(onlyPrintable: true)] public string $content; } \"\u00danico\" \u2192 \"nico\" \"\u0393\u03b5\u03b9\u03b1 \u03c3\u03b1\u03c2\" \u2192 \" \" \"Foo\\nBar\" \u2192 \"FooBar\" \"\\tHello\" \u2192 \"Hello\"","title":"Examples"},{"location":"Strings/Ascii.html#see-also","text":"-","title":"See also"},{"location":"Strings/Cut.html","text":"Cut Cut - Limit string length. Cut only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Cut(length: 255)] public string $title; } Parameters int length : If desired length is positive, the resulting string will start from the beginning of the string. If length is negative, the resulting string will start from the ending of the string. bool useBytes (optional): When false, length will represent characters. If true, length will be in bytes. Default value is false . Examples Limit the length of string to 5 characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: 5)] public string $name; } \"CPU-486\" \u2192 \"CPU-4\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u3057\u3087\u3046\u307c\u3046\" Limit the length of string to the last 3 characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: -3)] public string $name; } \"CPU-486\" \u2192 \"486\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u307c\u3046\u3057\" The string must be 3 bytes in size. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: 2)] public string $name; } \"CPU-486\" \u2192 \"CPU\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u3057\" See also Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"Cut"},{"location":"Strings/Cut.html#cut","text":"Cut - Limit string length. Cut only works with string , any other type is ignored.","title":"Cut"},{"location":"Strings/Cut.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\Cut(length: 255)] public string $title; }","title":"Basic usage"},{"location":"Strings/Cut.html#parameters","text":"int length : If desired length is positive, the resulting string will start from the beginning of the string. If length is negative, the resulting string will start from the ending of the string. bool useBytes (optional): When false, length will represent characters. If true, length will be in bytes. Default value is false .","title":"Parameters"},{"location":"Strings/Cut.html#examples","text":"Limit the length of string to 5 characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: 5)] public string $name; } \"CPU-486\" \u2192 \"CPU-4\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u3057\u3087\u3046\u307c\u3046\" Limit the length of string to the last 3 characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: -3)] public string $name; } \"CPU-486\" \u2192 \"486\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u307c\u3046\u3057\" The string must be 3 bytes in size. use Jawira\\Sanitizer\\Filters as Sanitizer; class Project { #[Sanitizer\\Cut(length: 2)] public string $name; } \"CPU-486\" \u2192 \"CPU\" \"\u3057\u3087\u3046\u307c\u3046\u3057\" \u2192 \"\u3057\"","title":"Examples"},{"location":"Strings/Cut.html#see-also","text":"Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"See also"},{"location":"Strings/EmptyStringToNull.html","text":"EmptyStringToNull EmptyStringToNull - Set null if value is empty string . EmptyStringToNull only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\EmptyStringToNull] public ?string $category; } Parameters No parameters. Examples Set null if value is empty string. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\EmptyStringToNull] public ?string $name; } \"John\" \u2192 \"John\" \" \" \u2192 \" \" \"\" \u2192 null See also Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"EmptyStringToNull"},{"location":"Strings/EmptyStringToNull.html#emptystringtonull","text":"EmptyStringToNull - Set null if value is empty string . EmptyStringToNull only works with string , any other type is ignored.","title":"EmptyStringToNull"},{"location":"Strings/EmptyStringToNull.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\EmptyStringToNull] public ?string $category; }","title":"Basic usage"},{"location":"Strings/EmptyStringToNull.html#parameters","text":"No parameters.","title":"Parameters"},{"location":"Strings/EmptyStringToNull.html#examples","text":"Set null if value is empty string. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\EmptyStringToNull] public ?string $name; } \"John\" \u2192 \"John\" \" \" \u2192 \" \" \"\" \u2192 null","title":"Examples"},{"location":"Strings/EmptyStringToNull.html#see-also","text":"Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"See also"},{"location":"Strings/Pad.html","text":"Pad Pad - Pad a string to a certain length with another string. Pad only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Report { #[Sanitizer\\Pad(length: 10)] public string $category; } Parameters int length : Length of resulting string once pad is applied. string padString (optional): String to use as pad. The default value is \" space \" character. string side (optional): Use right to apply pad at the end of string, this is the default value. Use left to apply pad at the beginning of string. Use both to apply pad at the beginning and the end of string. Examples Add leading zeros when string has less than three characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Classroom { #[Sanitizer\\Pad(length: 3, padString: '0', side: 'left')] public string $number; } \"1\" \u2192 \"001\" \"50\" \u2192 \"050\" \"312\" \u2192 \"312\" Create 30 characters width ascii art header: use Jawira\\Sanitizer\\Filters as Sanitizer; class AsciiArt { #[Sanitizer\\Pad(length: 30, padString: '-+-', side: 'both')] public string $title; } \"CREDITS\" \u2192 \"-+--+--+--+CREDITS-+--+--+--+-\" \"DOCUMENTATION\" \u2192 \"-+--+--+DOCUMENTATION-+--+--+-\" \"AUTHOR\" \u2192 \"-+--+--+--+-AUTHOR-+--+--+--+-\" Right padding of 30 characters with asterisk symbol: use Jawira\\Sanitizer\\Filters as Sanitizer; class Paycheck { #[Sanitizer\\Pad(length: 30, padString: '*')] public string $writtenAmount; } \"four thousand\" \u2192 \"four thousand*****************\" \"one thousand five hundred\" \u2192 \"one thousand five hundred*****\" See also Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"Pad"},{"location":"Strings/Pad.html#pad","text":"Pad - Pad a string to a certain length with another string. Pad only works with string , any other type is ignored.","title":"Pad"},{"location":"Strings/Pad.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Report { #[Sanitizer\\Pad(length: 10)] public string $category; }","title":"Basic usage"},{"location":"Strings/Pad.html#parameters","text":"int length : Length of resulting string once pad is applied. string padString (optional): String to use as pad. The default value is \" space \" character. string side (optional): Use right to apply pad at the end of string, this is the default value. Use left to apply pad at the beginning of string. Use both to apply pad at the beginning and the end of string.","title":"Parameters"},{"location":"Strings/Pad.html#examples","text":"Add leading zeros when string has less than three characters: use Jawira\\Sanitizer\\Filters as Sanitizer; class Classroom { #[Sanitizer\\Pad(length: 3, padString: '0', side: 'left')] public string $number; } \"1\" \u2192 \"001\" \"50\" \u2192 \"050\" \"312\" \u2192 \"312\" Create 30 characters width ascii art header: use Jawira\\Sanitizer\\Filters as Sanitizer; class AsciiArt { #[Sanitizer\\Pad(length: 30, padString: '-+-', side: 'both')] public string $title; } \"CREDITS\" \u2192 \"-+--+--+--+CREDITS-+--+--+--+-\" \"DOCUMENTATION\" \u2192 \"-+--+--+DOCUMENTATION-+--+--+-\" \"AUTHOR\" \u2192 \"-+--+--+--+-AUTHOR-+--+--+--+-\" Right padding of 30 characters with asterisk symbol: use Jawira\\Sanitizer\\Filters as Sanitizer; class Paycheck { #[Sanitizer\\Pad(length: 30, padString: '*')] public string $writtenAmount; } \"four thousand\" \u2192 \"four thousand*****************\" \"one thousand five hundred\" \u2192 \"one thousand five hundred*****\"","title":"Examples"},{"location":"Strings/Pad.html#see-also","text":"Trim - Strip whitespace (or other characters) from the beginning and end of a string.","title":"See also"},{"location":"Strings/Replace.html","text":"Replace Replace - Replace all occurrences of the search string with the replacement string . Replace only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Replace(search: ' ', replace: '_')] public string $name; } Parameters string search : The string you want to replace. string replace : The replacement string. string caseSensitive (optional): Search is case-sensitive, set this parameter to _false_ to perform a case-insensitive search. Default value is _true_. Examples Remove all whitespace characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Replace(search: ' ', replace: '')] public string $email; } \" bob@example.com \" \u2192 \"bob@example.com\" \"bob @ example.com\" \u2192 \"bob@example.com\" \" bob @ example .com \" \u2192 \"bob@example.com\" Replace a string by another. use Jawira\\Sanitizer\\Filters as Sanitizer; class Order { #[Sanitizer\\Replace('pizza', 'fries')] public string $description; } \"Client wants pizza.\" \u2192 \"Client wants fries.\" Perform case-insensitive search. use Jawira\\Sanitizer\\Filters as Sanitizer; class Famous { #[Sanitizer\\Replace('del toro', 'del Toro')] public string $name; } \"Guillermo del toro\" \u2192 \"Guillermo del Toro\" \"Guillermo DEL TORO\" \u2192 \"Guillermo del Toro\" See also StripTags - Strip HTML and PHP tags from a string .","title":"Replace"},{"location":"Strings/Replace.html#replace","text":"Replace - Replace all occurrences of the search string with the replacement string . Replace only works with string , any other type is ignored.","title":"Replace"},{"location":"Strings/Replace.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Replace(search: ' ', replace: '_')] public string $name; }","title":"Basic usage"},{"location":"Strings/Replace.html#parameters","text":"string search : The string you want to replace. string replace : The replacement string. string caseSensitive (optional): Search is case-sensitive, set this parameter to _false_ to perform a case-insensitive search. Default value is _true_.","title":"Parameters"},{"location":"Strings/Replace.html#examples","text":"Remove all whitespace characters. use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Replace(search: ' ', replace: '')] public string $email; } \" bob@example.com \" \u2192 \"bob@example.com\" \"bob @ example.com\" \u2192 \"bob@example.com\" \" bob @ example .com \" \u2192 \"bob@example.com\" Replace a string by another. use Jawira\\Sanitizer\\Filters as Sanitizer; class Order { #[Sanitizer\\Replace('pizza', 'fries')] public string $description; } \"Client wants pizza.\" \u2192 \"Client wants fries.\" Perform case-insensitive search. use Jawira\\Sanitizer\\Filters as Sanitizer; class Famous { #[Sanitizer\\Replace('del toro', 'del Toro')] public string $name; } \"Guillermo del toro\" \u2192 \"Guillermo del Toro\" \"Guillermo DEL TORO\" \u2192 \"Guillermo del Toro\"","title":"Examples"},{"location":"Strings/Replace.html#see-also","text":"StripTags - Strip HTML and PHP tags from a string .","title":"See also"},{"location":"Strings/StripTags.html","text":"StripTags StripTags - Strip HTML and PHP tags from a string . StripTags only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags] public string $content; } Parameters type array (optional): Array of allowed tags. Default value is empty array. Examples Strip all html tags. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags] public string $content; } \"Foo<br>Bar\" \u2192 \"FooBar\" \"<p>Hello <strong>John</strong></p>\" \u2192 \"Hello John\" \"Foo <!-- comment --> Bar\" \u2192 \"Foo Bar\" Strip all html tags but <br> and <p> tags. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags(allowedTags: ['br', 'p'])] public string $content; } \"Foo<br>Bar\" \u2192 \"Foo<br>Bar\" \"<p>Hello <strong>John</strong></p>\" \u2192 \"<p>Hello John</p>\" See also Replace - Replace all occurrences of the search string with the replacement string .","title":"StripTags"},{"location":"Strings/StripTags.html#striptags","text":"StripTags - Strip HTML and PHP tags from a string . StripTags only works with string , any other type is ignored.","title":"StripTags"},{"location":"Strings/StripTags.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags] public string $content; }","title":"Basic usage"},{"location":"Strings/StripTags.html#parameters","text":"type array (optional): Array of allowed tags. Default value is empty array.","title":"Parameters"},{"location":"Strings/StripTags.html#examples","text":"Strip all html tags. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags] public string $content; } \"Foo<br>Bar\" \u2192 \"FooBar\" \"<p>Hello <strong>John</strong></p>\" \u2192 \"Hello John\" \"Foo <!-- comment --> Bar\" \u2192 \"Foo Bar\" Strip all html tags but <br> and <p> tags. use Jawira\\Sanitizer\\Filters as Sanitizer; class Article { #[Sanitizer\\StripTags(allowedTags: ['br', 'p'])] public string $content; } \"Foo<br>Bar\" \u2192 \"Foo<br>Bar\" \"<p>Hello <strong>John</strong></p>\" \u2192 \"<p>Hello John</p>\"","title":"Examples"},{"location":"Strings/StripTags.html#see-also","text":"Replace - Replace all occurrences of the search string with the replacement string .","title":"See also"},{"location":"Strings/Trim.html","text":"Trim Trim - Strip whitespace (or other characters) from the beginning and end of a string. Trim only works with string , any other type is ignored. Basic usage use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim] public string $name; } Parameters string characters (optional): Set of characters you want to remove, default value is \" \\t\\n\\r\\0\\x0B \". string side (optional): Use both to apply trim at the beginning and the end of string, this is the default value. Use left to apply trim at the beginning of string. Use right to apply trim at the end of string. Examples Remove spaces from the beginning and end of string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim] public string $name; } \"Paul \" \u2192 \"Paul\" \" Paul \" \u2192 \"Paul\" \" Paul\" \u2192 \"Paul\" \"\\t\\tPaul\" \u2192 \"Paul\" \"Paul\\r\\n\" \u2192 \"Paul\" Remove spaces at the end of the string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim(side: 'right')] public string $name; } \"Paul \" \u2192 \"Paul\" \" Paul \" \u2192 \" Paul\" \" Paul\" \u2192 \" Paul\" \"\\t\\tPaul\" \u2192 \"\\t\\tPaul\" \"Paul\\r\\n\" \u2192 \"Paul\" Remove plus and minus signs at the beginning of the string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim(side: 'left', characters: '+-')] public string $name; } \" Paul \" \u2192 \" Paul \" \"-+-+Paul+-+-\" \u2192 \"Paul+-+-\" See also Pad - Pad a string to a certain length with another string.","title":"Trim"},{"location":"Strings/Trim.html#trim","text":"Trim - Strip whitespace (or other characters) from the beginning and end of a string. Trim only works with string , any other type is ignored.","title":"Trim"},{"location":"Strings/Trim.html#basic-usage","text":"use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim] public string $name; }","title":"Basic usage"},{"location":"Strings/Trim.html#parameters","text":"string characters (optional): Set of characters you want to remove, default value is \" \\t\\n\\r\\0\\x0B \". string side (optional): Use both to apply trim at the beginning and the end of string, this is the default value. Use left to apply trim at the beginning of string. Use right to apply trim at the end of string.","title":"Parameters"},{"location":"Strings/Trim.html#examples","text":"Remove spaces from the beginning and end of string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim] public string $name; } \"Paul \" \u2192 \"Paul\" \" Paul \" \u2192 \"Paul\" \" Paul\" \u2192 \"Paul\" \"\\t\\tPaul\" \u2192 \"Paul\" \"Paul\\r\\n\" \u2192 \"Paul\" Remove spaces at the end of the string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim(side: 'right')] public string $name; } \"Paul \" \u2192 \"Paul\" \" Paul \" \u2192 \" Paul\" \" Paul\" \u2192 \" Paul\" \"\\t\\tPaul\" \u2192 \"\\t\\tPaul\" \"Paul\\r\\n\" \u2192 \"Paul\" Remove plus and minus signs at the beginning of the string: use Jawira\\Sanitizer\\Filters as Sanitizer; class User { #[Sanitizer\\Trim(side: 'left', characters: '+-')] public string $name; } \" Paul \" \u2192 \" Paul \" \"-+-+Paul+-+-\" \u2192 \"Paul+-+-\"","title":"Examples"},{"location":"Strings/Trim.html#see-also","text":"Pad - Pad a string to a certain length with another string.","title":"See also"}]}